<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>Clone Zoom với Stringee hihi</title>

    <!-- import the webpage's stylesheet -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bulma@0.9.1/css/bulma.min.css"
    />
    <link rel="stylesheet" href="/style.css" />

    <!-- import the webpage's javascript file -->

    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios@0.20.0/dist/axios.min.js"></script>
    <script src="https://cdn.stringee.com/sdk/web/2.2.1/stringee-web-sdk.min.js"></script>
  </head>
  <body>
    <div class="container has-text-centered" v-cloak id="app">
      <h1 class="title">
        Ứng dụng Clone Zoom cực cool ngầu với
        <span class="header-highlight">Stringee API</span>
      </h1>

      <div>
        <button class="button is-primary" v-if="!room" @click="createRoom">
          Tạo Meeting
        </button>

        <button class="button is-info" v-if="!room" @click="joinWithId">
          Join Meeting
        </button>

        <button class="button is-info" v-if="room" @click="publish(true)">
          Share Desktop
        </button>
      </div>

      <div v-if="roomId" class="info">
        <p>Bạn đang ở trong room <strong>{{roomId}}</strong>.</p>
        <p>
          Gửi link này cho bạn bè cùng join room nhé
          <a v-bind:href="roomUrl" target="_blank">{{roomUrl}}</a>.
        </p>
        <p>Hoặc bạn cũng có thể copy <code>{{roomId}}</code> để share.</p>
      </div>
    </div>

    <div class="container">
      <div id="videos"></div>
    </div>
  </body>
  <script>const PROJECT_ID = "SKIuNgIgQclWM0GFSPCJO7eervWS7hKkQg";
    const PROJECT_SECRET = "Tk1NaUZGVElWZ3VpNFZVQlZVVTZseWFsWTlHTndyMw==";
    const BASE_URL = "https://api.stringee.com/v1/room2";
    
    class API {
      constructor(projectId, projectSecret) {
        this.projectId = projectId;
        this.projectSecret = projectSecret;
        this.restToken = "";
      }
    
      async createRoom() {
        const roomName = Math.random().toFixed(4);
        const response = await axios.post(
          `${BASE_URL}/create`,
          {
            name: roomName,
            uniqueName: roomName
          },
          {
            headers: this._authHeader()
          }
        );
    
        const room = response.data;
        console.log({ room });
        return room;
      }
    
      async listRoom() {
        const response = await axios.get(`${BASE_URL}/list`, {
          headers: this._authHeader()
        });
    
        const rooms = response.data.list;
        console.log({ rooms });
        return rooms;
      }
      
      async deleteRoom(roomId) {
        const response = await axios.put(`${BASE_URL}/delete`, {
          roomId
        }, {
          headers: this._authHeader()
        })
        
        console.log({response})
        
        return response.data;
      }
      
      async clearAllRooms() {
        const rooms = await this.listRoom()
        const response = await Promise.all(rooms.map(room => this.deleteRoom(room.roomId)))
        
        return response;
      }
    
      async setRestToken() {
        const tokens = await this._getToken({ rest: true });
        const restToken = tokens.rest_access_token;
        this.restToken = restToken;
    
        return restToken;
      }
    
      async getUserToken(userId) {
        const tokens = await this._getToken({ userId });
        return tokens.access_token;
      }
    
      async getRoomToken(roomId) {
        const tokens = await this._getToken({ roomId });
        return tokens.room_token;
      }
    
      async _getToken({ userId, roomId, rest }) {
        const response = await axios.get(
          "https://v2.stringee.com/web-sdk-conference-samples/php/token_helper.php",
          {
            params: {
              keySid: this.projectId,
              keySecret: this.projectSecret,
              userId,
              roomId,
              rest
            }
          }
        );
    
        const tokens = response.data;
        console.log({ tokens });
        return tokens;
      }
    
      isSafari() {
        const ua = navigator.userAgent.toLowerCase();
        return !ua.includes('chrome') && ua.includes('safari');
      }
    
      _authHeader() {
        return {
          "X-STRINGEE-AUTH": this.restToken
        };
      }
    }
    
    const api = new API(PROJECT_ID, PROJECT_SECRET);
    </script>
  <script src="/js/script.js"></script>
</html>
